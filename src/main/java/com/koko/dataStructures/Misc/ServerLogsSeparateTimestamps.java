package com.koko.dataStructures.Misc;

import java.util.HashMap;
import java.util.Map;

public class ServerLogsSeparateTimestamps {

    // Q: We have this server which generates logs and we want to process the complete set of logs
    // generated by this server.
    // Each log entry has an ID, start and end time...but the log entries for start and end time are separate.
    //
    //We need to find out what is the first log entry when we can say for sure that a certain log has
    // taken more than K seconds to process.
    // We need to return that time instant and the log ID.
    // If there's no such log entry which exceeds K seconds, then we just return a pair {-1, -1}
    //
    //Eg. with K = 3, for the below example we get the log ID as 2 and the timestamp when we know is 6.


    // Example:
    /*
    Timestamp	LogID	event type
0	1	start
1	2	start
2	1	end
6	3	start
7	2	end
     */



    // Solution:

    //Assuming logs are error free, and same logID only starts after ending, and ends after start.
    // TC: O(N)

    public int[] getKOverLogID(int[][] logs, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int[] log : logs) {
            if(!map.containsKey(log[1])) {
                map.put(log[1], log[0]);
                continue;
            }
            if(log[0]-map.get(log[1])>k) return new int[]{log[1],log[0]};
            map.remove(log[1]);
        }
        return new int[]{-1,-1};
    }
}
