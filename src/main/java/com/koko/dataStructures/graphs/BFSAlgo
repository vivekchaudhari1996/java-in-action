Q: Problem Statement: 
An Undirected Graph will be given. Return a vector of all the nodes of the Graph by Breadth-First Search ( BFS ) Technique.

Approach : 

-> We need to have this before proceeding :

Queue Data structure
Visited Array â€“ An array with all values initialised with 0.

-> We will push the 1st node into the queue data structure and mark it as visited. 
After this, we will find its adjacent nodes. 
If we get some unvisited node, we will simply push this adjacent node into the queue data structure

-> Now since the work of the 1st node is done, we will pop out this node from the queue. 
Now, this process goes on until the queue is not empty.


-> TC: O(N + E)
-> N = Nodes , E = travelling through adjacent nodes

-> SC: O(N+E) + O(N) + O(N)


public static ArrayList < Integer > bfsOfGraph(int V, ArrayList < ArrayList < Integer >> adj) {

        ArrayList < Integer > bfs = new ArrayList < > ();
        boolean vis[] = new boolean[V];
        
        for(int i=1;i<=V;i++){
        
          if(vis[i] == false){
        
            Queue < Integer > q = new LinkedList < > ();

            q.add(i);
            vis[i] = true;

            while (!q.isEmpty()) {
                Integer node = q.poll();
                bfs.add(node);

                // Get all adjacent vertices of the dequeued vertex s
                // If a adjacent has not been visited, then mark it
                // visited and enqueue it
                for (Integer it: adj.get(node)) {
                    if (vis[it] == false) {
                        vis[it] = true;
                        q.add(it);
                    }
                }
            }
         }
      }

        return bfs;

        // Code here
    }
    
    public static void main(String args[]) {

        ArrayList < ArrayList < Integer >> adj = new ArrayList < > ();
        for (int i = 0; i < 5; i++) {
            adj.add(new ArrayList < > ());
        }
        adj.get(0).add(1);
        adj.get(1).add(0);
        adj.get(0).add(2);
        adj.get(2).add(0);
        adj.get(0).add(3);
        adj.get(3).add(0);
        adj.get(2).add(4);
        adj.get(4).add(2);

        ArrayList < Integer > ans = bfsOfGraph(5, adj);
        printAns(ans);
    }

    static void printAns(ArrayList < Integer > ans) {
        for (int i = 0; i < ans.size(); i++) {
            System.out.print(ans.get(i) + " ");
        }
    }
    
    
    
    
